{"version":3,"sources":["components/Display/Display.js","containers/AddToSum/AddToSum.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","className","list","AddToSum","state","inputValue","sumValue","totalNum","sumInputValue","updateValue","setState","concat","sum","sumArr","reduce","allSum","avg","arr","length","sd","total1","total1F","total2","total3","Math","pow","totalSD","sqrt","total","num","round","message","showValue","this","map","ls","id","key","onClick","type","onChange","event","Number","target","value","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAeeA,G,MAZC,SAACC,GACb,OACI,yBAAKC,UAAU,eACX,4BACI,gCAAOD,EAAME,UCyFdC,G,iNA1FXC,MAAQ,CACJC,WAAY,GACZC,SAAU,CAAC,EAAE,EAAE,EAAE,GACjBC,SAAU,I,EAGdC,cAAgB,WACZ,IAAMC,EAAc,EAAKL,MAAMC,WAC/B,EAAKK,SAAS,CAACJ,SAAU,EAAKF,MAAME,SAASK,OAAOF,GAAcJ,WAAW,M,EAGjFO,IAAM,WACF,IACMC,EADM,EAAKT,MAAME,SACJQ,OAAO,EAAKC,OAAQ,GACvC,EAAKL,SAAS,CAACH,SAAUM,K,EAG7BG,IAAM,WACF,IAAMC,EAAM,EAAKb,MAAME,SACjBO,EAAUI,EAAIH,OAAO,EAAKC,OAAQ,GAAKE,EAAIC,OAEjD,EAAKR,SAAS,CAACH,SAAUM,K,EAG7BM,GAAK,WACD,IAAMF,EAAM,EAAKb,MAAME,SACjBc,EAAUH,EAAIH,OAAO,EAAKO,QAAS,GACnCC,EAAUL,EAAIH,OAAO,EAAKC,OAAQ,GAClCQ,EAASC,KAAKC,IAAIH,EAAQ,GAC1BI,EAAUF,KAAKG,MAAOV,EAAIC,OAAOE,EAAUG,IAASN,EAAIC,QAAQD,EAAIC,OAAS,KAEnF,EAAKR,SAAS,CAACH,SAAUmB,K,EAG7BX,OAAS,SAACa,EAAQC,GACd,OAAOL,KAAKM,MAAMF,EAAQC,I,EAG9BR,QAAU,SAACO,EAAOC,GAEd,OADeL,KAAKM,MAAMF,EAAQJ,KAAKC,IAAII,EAAK,K,EAIpDE,QAAU,WACN,EAAKrB,SAAS,CAACH,SAAU,kB,wEAGnB,IAAD,OAECyB,EAAYC,KAAK7B,MAAME,SAAS4B,KAAI,SAACC,EAAIC,GAC3C,OACI,yBAAKC,IAAKD,GACN,kBAAC,EAAD,CACIlC,KAAMiC,EACNP,MAAO,EAAKxB,MAAMG,eAMlC,OACE,yBAAKN,UAAU,eACb,wBAAIqC,QAASL,KAAKF,SAAlB,gBACA,wBAAI9B,UAAU,WACTgC,KAAK7B,MAAMG,UAEhB,2BACIgC,KAAK,OACLC,SAAU,SAACC,GAAD,OAAW,EAAK/B,SAAS,CAACL,WAAWqC,OAAOD,EAAME,OAAOC,MAAO,OAC1EA,MAAOX,KAAK7B,MAAMC,WAClBwC,YAAY,gBAChB,wBAAI5C,UAAU,YACV,4BAAQqC,QAASL,KAAKzB,eAAtB,OACA,4BAAQ+B,KAAK,QAAQD,QAAS,kBAAM,EAAK5B,SAAS,CAACJ,SAAU,GAAIC,SAAU,OAA3E,UAIJ,wBAAIN,UAAU,aACV,4BAAQqC,QAASL,KAAKrB,KAAtB,OACA,4BAAQ0B,QAASL,KAAKjB,KAAtB,WACA,4BAAQsB,QAASL,KAAKd,IAAtB,SAGHa,O,GArFUc,cCURC,G,uLARX,OACE,yBAAK9C,UAAU,OACb,kBAAC,EAAD,W,GAJU6C,cCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.27136d72.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Display.css';\r\n\r\nconst Display = (props) => {\r\n    return (\r\n        <div className=\"DisplayItem\">\r\n            <ul>\r\n                <li > {props.list}</li>\r\n               \r\n            </ul>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;","import React, { Component } from 'react';\r\nimport Display from '../../components/Display/Display';\r\nimport  './AddToSum.css';\r\n\r\nclass AddToSum extends Component {\r\n\r\n    state = {\r\n        inputValue: '',\r\n        sumValue: [1,2,3,4],\r\n        totalNum: ''\r\n    }\r\n\r\n    sumInputValue = () => {\r\n        const updateValue = this.state.inputValue;\r\n        this.setState({sumValue: this.state.sumValue.concat(updateValue), inputValue:''});\r\n    }\r\n\r\n    sum = () => {\r\n        const arr = this.state.sumValue;\r\n        const sumArr = arr.reduce(this.allSum, 0);\r\n        this.setState({totalNum: sumArr});\r\n    }\r\n\r\n    avg = () => {\r\n        const arr = this.state.sumValue;\r\n        const sumArr = (arr.reduce(this.allSum, 0))/ arr.length;\r\n\r\n        this.setState({totalNum: sumArr});\r\n    }\r\n\r\n    sd = () => {\r\n        const arr = this.state.sumValue;\r\n        const total1 = (arr.reduce(this.total1F, 0));\r\n        const total2 = (arr.reduce(this.allSum, 0));\r\n        const total3 = Math.pow(total2, 2);\r\n        const totalSD = Math.sqrt(((arr.length*total1) - total3)/(arr.length*(arr.length - 1)));\r\n\r\n        this.setState({totalNum: totalSD});\r\n    }\r\n\r\n    allSum = (total , num ) => {\r\n        return Math.round(total + num);\r\n    }\r\n\r\n    total1F = (total, num) => {\r\n        const total1 = Math.round(total + Math.pow(num, 2));\r\n        return total1\r\n    }\r\n\r\n    message = () => {\r\n        this.setState({totalNum: 'Made by MJDC'});\r\n    }\r\n\r\n    render() {\r\n\r\n        const showValue = this.state.sumValue.map((ls, id) => {\r\n            return (\r\n                <div key={id}>\r\n                    <Display \r\n                        list={ls}\r\n                        total={this.state.totalNum}\r\n                    />\r\n                </div>\r\n            );\r\n        })\r\n\r\n        return(\r\n          <div className=\"AddToSumCSS\">\r\n            <h3 onClick={this.message}>ONLY NUMBER!</h3>\r\n            <ul className=\"Display\">\r\n                {this.state.totalNum}\r\n            </ul>\r\n            <input \r\n                type=\"text\" \r\n                onChange={(event) => this.setState({inputValue:Number(event.target.value, 10)})} \r\n                value={this.state.inputValue} \r\n                placeholder=\"Only Number\"/>\r\n            <ul className=\"InputBTN\">\r\n                <button onClick={this.sumInputValue}>ADD</button>   \r\n                <button type=\"reset\" onClick={() => this.setState({sumValue: [], totalNum: ''})}>RESET</button>\r\n            </ul>\r\n               \r\n\r\n            <ul className=\"ActionBTN\">\r\n                <button onClick={this.sum}>SUM</button>\r\n                <button onClick={this.avg}>AVERAGE</button>\r\n                <button onClick={this.sd}>S.D.</button>\r\n            </ul>\r\n                \r\n            {showValue}\r\n            \r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default AddToSum;","import React, { Component } from 'react';\nimport AddToSum from './containers/AddToSum/AddToSum';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return(\n      <div className=\"App\">\n        <AddToSum />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}